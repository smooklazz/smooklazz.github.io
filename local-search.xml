<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>JVM-程序计数器及其作用</title>
    <link href="/2022/04/21/JVM-%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8%E5%8F%8A%E5%85%B6%E4%BD%9C%E7%94%A8/"/>
    <url>/2022/04/21/JVM-%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8%E5%8F%8A%E5%85%B6%E4%BD%9C%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>多线程的Java应用程序：为了让每个线程正常工作就提出了程序计数器（Programe Counter Register），每个线程都有自己的程序计数器这样当线程执行切换的时候就可以在上次执行的基础上继续执行，仅仅从一条线程线性执行的角度而言，代码是一条一条的往下执行的，这个时候就是程序计数器；JVM就是通过读取程序计数器的值来决定下一条需要执行的字节码指令，进而进行选择语句、循环、异常处理等；</p><h1 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h1><p>比如老王正在看片，他看到三十五分钟的时候，突然他的QQ好友苍老师给他开视频，这时候肯定打断他看片了，假设苍老师和他视频完了，他肯定要接着他那35分钟的进度去继续看，这时候他怎么知道我看到35分钟了？这时候程序计数器就起了作用，他负责管理进度。</p><h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><ul><li>线程私有</li><li>JVM规范中唯一没有规定OutOfMemoryError情况的区域</li><li>如果正在执行的是Native 方法，则这个计数器值为空</li></ul><p><strong>首先，为什么是线程私有？</strong><br>Java虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现，也就是说，在同一时刻一个处理器内核只会执行一条线程，处理器切换线程时并不会记录上一个线程执行到哪个位置，所以为了线程切换后依然能恢复到原位，每条线程都需要有各自独立的程序计数器。</p><p><strong>为什么没有规定OutOfMemoryError？</strong><br>如上文，程序计数器存储的是字节码文件的行号，而这个范围是可知晓的，在一开始分配内存时就可以分配一个绝对不会溢出的内存。</p><p><strong>为什么执行Native方法，值为空？</strong><br>Native方法大多是通过C实现并未编译成需要执行的字节码指令，也就不需要去存储字节码文件的行号了。</p><p><a href="https://blog.csdn.net/jiangyang100/article/details/90614280">摘要连接</a></p>]]></content>
    
    
    <categories>
      
      <category>技术博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java实现滑动窗口</title>
    <link href="/2022/04/21/Java%E5%AE%9E%E7%8E%B0%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
    <url>/2022/04/21/Java%E5%AE%9E%E7%8E%B0%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p><strong>LeetCode：239. 滑动窗口最大值</strong><br>给定一个数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k 个数字。滑动窗口每次只向右移动一位。</p><p>返回滑动窗口中的<strong>最大值</strong>。</p><h2 id="窗口"><a href="#窗口" class="headerlink" title="窗口"></a>窗口</h2><p>这里窗口采用双端队列实现（即双向链表），并且==窗口必须满足从大到小排列==，如下所示<br><strong>向窗口添加数据时：</strong></p><blockquote><p>假如<strong>窗口大小为8</strong>，遍历数组，并依次放入队列，存在三种可能：</p><ol><li>当当前数小于队列末尾数时，满足 <strong>（大-&gt;小）</strong> ，则添加到队尾，如：队列状态2；</li><li>当当前数大于队列末尾数时，不满足 <strong>（大-&gt;小）</strong> ，则<strong>弹出队尾数</strong>，并继续向前比较直到存在比当前数大或者队列为空时，再将当前数添加至队尾，如：队列状态5，7大于之前所有的数；</li><li>当当前数等于队列末尾数时，<strong>弹出队尾数</strong>，将当前数添加进队列</li></ol><table><thead><tr><th>原数组</th><th>5</th><th>4</th><th>1</th><th>2</th><th>7</th><th>5</th><th>9</th><th>6</th></tr></thead><tbody><tr><td>窗口状态1</td><td>5</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>窗口状态2</td><td>5</td><td>4</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>窗口状态3</td><td>5</td><td>4</td><td>1</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>窗口状态4</td><td>5</td><td>4</td><td>2</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>窗口状态5</td><td>7</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>窗口状态6</td><td>7</td><td>5</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>窗口状态7</td><td>9</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>窗口状态8</td><td>9</td><td>6</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>窗口移动时：</strong></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>记录窗口左边界，从窗口左边弹出下标不在边界内的数据，并同时向窗口右边添加数据，直到窗口越界</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>假如<strong>窗口大小为3</strong></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>原数组</td><td>5</td><td>4</td><td>1</td><td>2</td><td>7</td><td>5</td><td>9</td><td>6</td></tr><tr><td>–</td><td>–</td><td>–</td><td>–</td><td>–</td><td>–</td><td>–</td><td>–</td><td>–</td></tr><tr><td>窗口框住的数据</td><td>5</td><td>4</td><td>1</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>窗口状态1</td><td>5</td><td>4</td><td>1</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>窗口框住的数据</td><td></td><td>4</td><td>1</td><td>2</td><td></td><td></td><td></td><td></td></tr><tr><td>窗口状态2</td><td></td><td>4</td><td>2</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>窗口框住的数据</td><td></td><td></td><td>1</td><td>2</td><td>7</td><td></td><td></td><td></td></tr><tr><td>窗口状态3</td><td></td><td></td><td>7</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>窗口框住的数据</td><td></td><td></td><td></td><td>2</td><td>7</td><td>5</td><td></td><td></td></tr><tr><td>窗口状态4</td><td></td><td></td><td></td><td>7</td><td>5</td><td></td><td></td><td></td></tr><tr><td>窗口框住的数据</td><td></td><td></td><td></td><td></td><td>7</td><td>5</td><td>9</td><td></td></tr><tr><td>窗口状态5</td><td></td><td></td><td></td><td></td><td>9</td><td></td><td></td><td></td></tr><tr><td>窗口框住的数据</td><td></td><td></td><td></td><td></td><td></td><td>5</td><td>9</td><td>6</td></tr><tr><td>窗口状态6</td><td></td><td></td><td></td><td></td><td></td><td>9</td><td>6</td><td></td></tr></tbody></table></blockquote><h2 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h2><p>==注意：代码实现中，双端队列中存的是数组值的<strong>下标</strong>，并不是值本身==</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] maxSlidingWindow(<span class="hljs-type">int</span>[] arr,<span class="hljs-type">int</span> k) &#123;<br><span class="hljs-keyword">if</span>(arr.length == <span class="hljs-number">0</span> || arr.length == <span class="hljs-number">1</span>)<span class="hljs-keyword">return</span> arr;<br><span class="hljs-type">int</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span> [arr.length - k + <span class="hljs-number">1</span>];<br>LinkedList&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br><span class="hljs-comment">//添加数据时，满足2、3状态时，弹出队尾</span><br><span class="hljs-keyword">while</span>(!list.isEmpty() &amp;&amp; arr[list.peekLast()] &lt;= arr[i]) &#123;<br>list.pollLast();<br>&#125;<br>list.addLast(i);<br><span class="hljs-comment">//队头下标越界弹出队头</span><br><span class="hljs-keyword">if</span>(i - k &gt;= list.peekFirst()) &#123;<br>list.pollFirst();<br>&#125;<br><span class="hljs-keyword">if</span>(i + <span class="hljs-number">1</span> &gt;= k) &#123;<br>res[i - k + <span class="hljs-number">1</span>] = arr[list.peekFirst()];<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="进阶版题目"><a href="#进阶版题目" class="headerlink" title="进阶版题目"></a>进阶版题目</h2><blockquote><p>最大值减去最小值小于或等于num的子数组数量<br><strong>题目：</strong><br>给定数组arr和整数num，共返回有多少个子数组满足如下情况：<br>max（arr【i..j】）-min(ar[i..j]) &lt;= num<br>要求：<br>如果数组长度为N，情实现时间复杂度为O(N)的解法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">count</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> num)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">L</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">R</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>LinkedList&lt;Integer&gt; max = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>LinkedList&lt;Integer&gt; min = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br><span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(L &lt; arr.length) &#123;<br><span class="hljs-comment">//窗口右边界向右扩，直到不满足最大值最小值差大于num</span><br><span class="hljs-keyword">while</span>(R &lt; arr.length) &#123;<br><span class="hljs-comment">//最大值链表由大到小存好</span><br><span class="hljs-keyword">while</span>(!max.isEmpty() &amp;&amp; arr[max.peekLast()] &lt;= arr[R]) &#123;<br>max.pollLast();<br>&#125;<br>max.addLast(R);<br><span class="hljs-comment">//最小值链表由小到大存好</span><br><span class="hljs-keyword">while</span>(!min.isEmpty() &amp;&amp; arr[min.peekLast()] &gt;= arr[R]) &#123;<br>min.pollLast();<br>&#125;<br>min.addLast(R);<br><span class="hljs-comment">//不满足条件则break</span><br><span class="hljs-keyword">if</span>(arr[max.peekFirst()] - arr[min.peekFirst()] &gt; num) &#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>R++;<br>&#125;<br><span class="hljs-comment">//添加当前窗口内存在以左边界为起始的序列数共有R-L个</span><br>res += R - L;<br><span class="hljs-comment">//弹出最大值或最小值为左边界的数，因为左边界要自增一</span><br><span class="hljs-keyword">if</span>(max.peekFirst() == L) &#123;<br>max.pollFirst();<br>&#125;<br><span class="hljs-keyword">if</span>(min.peekFirst() == L)&#123;<br>min.pollFirst();<br>&#125;<br>L++;<br>&#125;<br><span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>一般求连续区间的问题时，可以用滑动窗口</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>技术博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java设计模式-代理模式详解</title>
    <link href="/2022/04/21/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/"/>
    <url>/2022/04/21/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><h2 id="一、静态代理"><a href="#一、静态代理" class="headerlink" title="一、静态代理"></a>一、静态代理</h2><h5 id="三类角色"><a href="#三类角色" class="headerlink" title="三类角色"></a>三类角色</h5><ol><li><strong>抽象角色</strong>：定义代理角色和公共角色的公共对外方法</li><li><strong>真实角色</strong>：实现抽象角色，定义真是角色所要实现的业务逻辑供代理角色调用，==关注真正地业务逻辑==</li><li><strong>代理角色</strong>：实现抽象角色，是真实角色的代理，通过真是角色的业务逻辑方法来实现抽象方法，并附加自己的操作。==将统一的流程放到代理中处理==<h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5></li><li>抽象角色</li></ol><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Star</span> &#123;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">confer</span><span class="hljs-params">()</span>;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">signContract</span><span class="hljs-params">()</span>;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">bookTicket</span><span class="hljs-params">()</span>;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">sing</span><span class="hljs-params">()</span>;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">collectMoney</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>真实角色（歌手）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RealStar</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Star</span>&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">confer</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;RealStar.confer()&quot;</span>);<br><br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">signContract</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;RealStar.signContract()&quot;</span>);<br><br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bookTicket</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;RealStar.bookTicket()&quot;</span>);<br><br>&#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 可以继承所有的抽象方法，但主要是唱歌</span><br><span class="hljs-comment">    */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sing</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;RealStar(Jay).sing()&quot;</span>);<br><br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">collectMoney</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;RealStar.collectMoney()&quot;</span>);<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>代理角色（经纪人）：除了唱歌什么都干</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyStar</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Star</span>&#123;<br><br><span class="hljs-keyword">private</span> Star star;<br><br><br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">ProxyStar</span><span class="hljs-params">(Star star)</span> &#123;<br><span class="hljs-built_in">super</span>();<br><span class="hljs-built_in">this</span>.star = star;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">confer</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;ProxyStar.confer()&quot;</span>);<br><br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">signContract</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;ProxyStar.signContract()&quot;</span>);<br><br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bookTicket</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;ProxyStar.bookTicket()&quot;</span>);<br><br>&#125;<br><span class="hljs-comment">//唱歌交给，构造函数传进来的歌手对象去唱歌</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sing</span><span class="hljs-params">()</span> &#123;<br>star.sing();<br><br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">collectMoney</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;ProxyStar.collectMoney()&quot;</span>);<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>客户</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Star</span> <span class="hljs-variable">star</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RealStar</span>();<br><span class="hljs-type">Star</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProxyStar</span>(star);<br>proxy.confer();<br>proxy.bookTicket();<br>proxy.sing();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ProxyStar<span class="hljs-selector-class">.confer</span>()<br>ProxyStar<span class="hljs-selector-class">.bookTicket</span>()<br><span class="hljs-function"><span class="hljs-title">RealStar</span><span class="hljs-params">(Jay)</span></span><span class="hljs-selector-class">.sing</span>()<br><br></code></pre></td></tr></table></figure><h5 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h5><p>好处：</p><ul><li>可以使真是角色的操作更加纯粹！不用去关注一些公共的业务</li><li>公共业务交给代理角色！实现业务分工</li><li>公共业务扩展时，方便集中管理</li></ul><p>缺点：</p><ul><li>一个真实角色就会产生一个代理角色；代码量会翻倍~开发效率低<h2 id="二、动态代理"><a href="#二、动态代理" class="headerlink" title="二、动态代理"></a>二、动态代理</h2></li><li>动态代理和静态代理角色一样</li><li>动态代理的代理类是动态生成的，不是直接写好的</li><li>动态代理分为两大类：基于接口的动态代理；基于类的动态代理<ul><li>基于接口–JDK动态代理</li><li>基于类的–cglib；javassist<h5 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h5>动态代理中变化的就是代理和客户端<br>动态代理的一大特点就是编译阶段没有代理类，==在运行时才生成代理类==。<br>代理类：</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DynamicProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br><br><span class="hljs-comment">//　这个就是我们要代理的真实对象，即房东</span><br><span class="hljs-keyword">private</span> Object target;<br><br><span class="hljs-comment">//  构造方法，给我们要代理的真实对象赋初值</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">DynamicProxy</span><span class="hljs-params">(Object target)</span> &#123;<br>    <span class="hljs-built_in">this</span>.target= target;<br>&#125;<br><br><span class="hljs-comment">//proxy:　　指代我们所代理的那个真实对象</span><br><span class="hljs-comment">//method:　　指代的是我们所要调用真实对象的某个方法的Method对象</span><br><span class="hljs-comment">//args:　　指代的是调用真实对象某个方法时接受的参数</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>    <span class="hljs-comment">//　　在代理真实对象前我们可以添加一些自己的操作</span><br>    System.out.println(<span class="hljs-string">&quot;before &quot;</span>+method.getName());<br><br>    System.out.println(<span class="hljs-string">&quot;Method:&quot;</span> + method.getName());<br><br>    <span class="hljs-comment">//        如果方法是 sing则调用真实角色运行方法</span><br>    <span class="hljs-keyword">if</span> (method.getName().equals(<span class="hljs-string">&quot;sing&quot;</span>)) &#123;<br><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> method.invoke(target, args);<br><br>    &#125; <br><br>    <span class="hljs-comment">//　　在代理真实对象后我们也可以添加一些自己的操作</span><br>    System.out.println(<span class="hljs-string">&quot;after &quot;</span>+method.getName());<br><br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>Client：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br>    <span class="hljs-comment">//    我们要代理的真实对象--歌手</span><br>    Star star= <span class="hljs-keyword">new</span> <span class="hljs-title class_">RealStar</span>();<br><br>    <span class="hljs-comment">//    我们要代理哪个真实对象，就将该对象传进去，最后是通过该真实对象来调用其方法的</span><br>    <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DynamicProxy</span>(star);<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 通过Proxy的newProxyInstance方法来创建我们的代理对象，我们来看看其三个参数</span><br><span class="hljs-comment">     * 第一个参数 handler.getClass().getClassLoader() ，我们这里使用handler这个类的ClassLoader对象来加载我们的代理对象</span><br><span class="hljs-comment">     * 第二个参数realSubject.getClass().getInterfaces()，我们这里为代理对象提供的接口是真实对象所实行的接口，表示我要代理的是该真实对象，这样我就能调用这组接口中的方法了</span><br><span class="hljs-comment">     * 第三个参数handler， 我们这里将这个代理对象关联到了上方的 InvocationHandler 这个对象上</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">Star</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> (Star) Proxy.newProxyInstance(handler.getClass().getClassLoader(), star<br>            .getClass().getInterfaces(), handler);<span class="hljs-comment">//一个动态代理类，中介</span><br><br>    proxy.sing();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>KMP算法讲解、Java实现及面试题目</title>
    <link href="/2022/04/21/KMP%E7%AE%97%E6%B3%95%E8%AE%B2%E8%A7%A3%E3%80%81Java%E5%AE%9E%E7%8E%B0%E5%8F%8A%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE/"/>
    <url>/2022/04/21/KMP%E7%AE%97%E6%B3%95%E8%AE%B2%E8%A7%A3%E3%80%81Java%E5%AE%9E%E7%8E%B0%E5%8F%8A%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="KMP算法讲解、Java实现及面试题目"><a href="#KMP算法讲解、Java实现及面试题目" class="headerlink" title="KMP算法讲解、Java实现及面试题目"></a>KMP算法讲解、Java实现及面试题目</h1><h2 id="KMP算法讲解"><a href="#KMP算法讲解" class="headerlink" title="KMP算法讲解"></a>KMP算法讲解</h2><ul><li>KMP用来干什么？</li></ul><hr><p> 在说KMP算法之前，我们还是先来说一下KMP算法是用来解决什么问题的。</p><ul><li><strong>问题</strong>：假如现在有两个字符串s1（a<strong>abcabce</strong>d）和字符串s2（abcabce）<div class="code-wrapper"><pre><code class="hljs">   **现在要求**：s2在s1中第一次出现的下标（上面的例子结果下标就为1）。</code></pre></div>  <strong>暴力的解法是</strong>：遍历一遍s1的所有字符，并且以遍历到的字符为起始与s2进行比对，如果有完全匹配的字符串，则对应的                    起始字符下标便是所求的下标；这样的解法时间复杂度是O(N*M)。<br>   而KMP算法就是对暴力解法的优化。</li></ul><ul><li>KMP算法</li></ul><hr><div class="code-wrapper"><pre><code class="hljs">KMP算法优化主要是提出了一个next数组（跟s2有关系），那么这个是用来干什么的呢？ next数组存的是当前字符前的字符串（不包括自己）的最长的 前缀和 后缀 相同的长度(第一个字符和第二个字符在next中规定为-1和0) 假设s2是（abcabce）那么next数组存储对应如下所示： </code></pre></div><table><thead><tr><th>s2</th><th>a</th><th>b</th><th>c</th><th>a</th><th>b</th><th>c</th><th>e</th></tr></thead><tbody><tr><td>下标</td><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td></tr><tr><td>next</td><td>-1</td><td>0</td><td>0</td><td>0</td><td>1</td><td>2</td><td>3</td></tr></tbody></table><div class="code-wrapper"><pre><code class="hljs">（1）现在规定next下标为0时值为-1，下标为1时值为0；因为当字符为第一个字符时，没有前缀。当字符为第二个字符时，前缀和后缀一样所以为0；（2）当下标为2时，前面的字符串为ab，那么他的前缀为a，后缀为b时不相同，所以赋值为0；（3）同理当下标为3时也为0；（4）当下标为4时，b前面的字符串，前缀为a和后缀为a时，相同且是最长的，所以赋值为1（5）当下标为5时，c前面的字符串，前缀为ab和后缀为ab时，相同且是最长的，所以赋值为2（6）当下标为6时，e前面的字符串，前缀为abc和后缀为abc时，相同且是最长的，所以赋值为3</code></pre></div><p>求出next数组后，接下来就要进行求解了：<br>    （1）首先初始化两个指针x，y，分别记录两个字符串s1，s2，当前的下标；<br>    （2）当两个下标所对应的字符相同则同时自增<br>    （3）不同，则在next数组中寻找y对应的下标的值（即y对应当前字符的前面字符串的前缀的下标），判断其是否为-1，为-1则y=0，且x与y对应的两个字符都不相同，所以x自增1<br>    （4）若不为-1，则表示y当前字符前面可能还存在前缀，所以在next中查找对应y下标的值，并将其赋给y（因为next中存的是长度，所以换成下标的话则为前缀后面一位），继续从头重复前面的步骤，直到越界。<br>    这样求解的算法<strong>复杂度为O(N)</strong></p><h2 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h2><p><strong>求s2字符串的next数组：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 求的是当前字符的最长的前缀和后缀相同的长度例如abcabcd（d的前面的字符串的 前缀和后缀相同的 最长的字符串是abc）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] getNext(<span class="hljs-type">char</span>[] str) &#123;<br><span class="hljs-keyword">if</span>(str.length == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[] &#123;-<span class="hljs-number">1</span>&#125;;<br><span class="hljs-type">int</span> [] next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span> [str.length];<br>next[<span class="hljs-number">0</span>] = -<span class="hljs-number">1</span>;<span class="hljs-comment">//初始化next数组的前两个值</span><br>next[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">cn</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//记录前一个数的前缀下一个字符的的下标</span><br><span class="hljs-keyword">while</span>(i &lt; str.length) &#123;<br><span class="hljs-keyword">if</span>(str[i - <span class="hljs-number">1</span>] == str[cn]) &#123;<br>next[i++] = ++cn;<span class="hljs-comment">//两个字符相同则++</span><br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(cn &gt; <span class="hljs-number">0</span>)&#123;<br>cn = next[cn];<span class="hljs-comment">//如果不相等，且cn大于0，则将next数组中当前cn下标的值赋给cn，即cn下标的最小前缀</span><br>&#125;<span class="hljs-keyword">else</span> &#123;<br>next[i++] = <span class="hljs-number">0</span>;<span class="hljs-comment">//当cn==0时，当前i对应next为0</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> next;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>求解s2字符串在s1字符串中第一次出现的下标：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">kmp</span><span class="hljs-params">(String s1, String s2)</span> &#123;<br><span class="hljs-keyword">if</span>(s1.length() &lt; <span class="hljs-number">1</span> || s2.length() &lt; <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br><span class="hljs-type">char</span>[] chars1 = s1.toCharArray();<br><span class="hljs-type">char</span>[] chars2 = s2.toCharArray();<br><span class="hljs-type">int</span> [] next = getNext(chars2);<span class="hljs-comment">//获取s2的next数组</span><br><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//初始化两个指针</span><br><span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(x &lt; s1.length() &amp;&amp; y &lt; s2.length()) &#123;<br><span class="hljs-keyword">if</span>(chars1[x] == chars2[y]) &#123;<span class="hljs-comment">//相同则自增一</span><br>x++;<br>y++;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(next[y] == -<span class="hljs-number">1</span>) &#123;<span class="hljs-comment">//找到头了，就重新开始</span><br>x++;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>y = next[y];<span class="hljs-comment">//不同则寻找前一个</span><br>&#125;<br>&#125;<br><span class="hljs-type">return</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span>= s2.length() ? x - y : -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="面试题目"><a href="#面试题目" class="headerlink" title="面试题目"></a>面试题目</h2><p> 京东面试题：给一个原始串例如：abcabc<br> 要求：在原始串后添加字符，使添加字符串最短，并且可以使原字符串出现两次，并且起始位置不同：例如：abcabcabc<br> 解法：此题与上面求next数组同理，可以将原始串类比成，求当前字符的最长的前缀和后缀相同的长度；则最长前缀为abc<br> 所以只需要在原始串的基础上继续添加，abc前缀后面的字符串就可以了。</p><h3 id="Java代码-1"><a href="#Java代码-1" class="headerlink" title="Java代码"></a>Java代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] getNexts(<span class="hljs-type">char</span>[] str) &#123;<br><span class="hljs-keyword">if</span>(str.length == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[] &#123;-<span class="hljs-number">1</span>&#125;;<br><span class="hljs-type">int</span> [] next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[str.length];<br>next[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">cn</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(i &lt; str.length) &#123;<br><span class="hljs-keyword">if</span>(str[cn] == str[i]) &#123;<br>next[i++] = ++cn;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(cn &gt; <span class="hljs-number">0</span>) &#123;<br>cn = next[cn];<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>i++;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> next;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>  String <span class="hljs-title function_">remke</span><span class="hljs-params">(String s)</span> &#123;<br><span class="hljs-keyword">if</span>(s.length() &lt;= <span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-type">int</span> [] next = getNexts(s.toCharArray());<br><br><span class="hljs-keyword">return</span> s + s.substring(next[next.length - <span class="hljs-number">1</span>], s.length());<br>&#125;<br></code></pre></td></tr></table></figure><p>进阶题目：判断一棵二叉树是否是另一棵二叉树的子树<br>解法：将两棵二叉树进行序列化成字符串，将问题变为求一个字符串是否是另一个字符串的子串，然后采用KMP算法。</p>]]></content>
    
    
    <categories>
      
      <category>技术博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>KMP算法讲解、Java实现及面试题目</title>
    <link href="/2022/04/21/Manacher%E9%A9%AC%E6%8B%89%E8%BD%A6%E7%AE%97%E6%B3%95Java%E7%AE%80%E6%B4%81%E4%BB%A3%E7%A0%81+%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE/"/>
    <url>/2022/04/21/Manacher%E9%A9%AC%E6%8B%89%E8%BD%A6%E7%AE%97%E6%B3%95Java%E7%AE%80%E6%B4%81%E4%BB%A3%E7%A0%81+%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="Manacher马拉车算法"><a href="#Manacher马拉车算法" class="headerlink" title="Manacher马拉车算法"></a>Manacher马拉车算法</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ol><li><strong>添加字符#<strong>，可以解决字符串长度奇偶数问题。例如：<br>字符串：11311<br>表格第二行为，以当前字符为中心的最长回文子串长度，</strong>除以2</strong>则为在原字符串中的回文子串长度。例如：11/2=5，表示中心为3时最长回文长度为5。</li></ol><table><thead><tr><th>#</th><th>1</th><th>#</th><th>1</th><th>#</th><th>3</th><th>#</th><th>1</th><th>#</th><th>1</th><th>#</th></tr></thead><tbody><tr><td>1</td><td>3</td><td>5</td><td>3</td><td>1</td><td><strong>11</strong></td><td>1</td><td>3</td><td>5</td><td>3</td><td>1</td></tr><tr><td>2. <strong>回文半径数组</strong>：以每个字符为中心，能扩出的回文半径的长度</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>3. 所有回文半径的<strong>回文最右边界</strong>，当前字符和之前字符能到达的最有边界。例如：012131210；当到3时，右边界到达字符串最右边的0位置，所以当3后面的字符1210，每个字符的最右边界都是最右边的0位置。</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>4. 回文右边界的中心：<strong>最早</strong>取得回文最右边界位置的中心，此概念是<strong>与回文右边界绑定</strong>的。</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p> |字符串|0 |1|2 |1|3  | 1 | 2 | 1 | 0 |<br>|–|–|–|–|–|–|–|–|–|–|–|<br> |下标|0 |1|2 |3|4  | 5 | 6 | 7 | 8 |<br>|  最右边界（R）|0  |1|3|3|8|8|8|8|8|<br>|  中心（C）|0  |1|2|2|4|4|4|4|4|</p><h2 id="以当前位置向外扩的可能性"><a href="#以当前位置向外扩的可能性" class="headerlink" title="以当前位置向外扩的可能性"></a>以当前位置向外扩的可能性</h2><p>假设当前位置为i</p><ol><li>i不在<strong>回文最右边界</strong>内时<br> 选择暴力向两边扩，扩不出去则自己为最右边界。</li><li>i在<strong>回文最右边界</strong>内时<br> ==首先通过i和C（中心），找到<strong>i</strong>的对称点<strong>i’</strong>==<blockquote><ul><li>如果<strong>i’</strong> 的边界在LR边界内，则<strong>i</strong>的边界也在最右边界范围内，不用再去扩。<br><img src="https://img-blog.csdnimg.cn/20200418172916323.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzIxODUwMA==,size_16,color_FFFFFF,t_70" alt="Smooklazz"></li><li>如果<strong>i’</strong> 的左边界不在LR边界内，则<strong>i</strong>的回文半径是i到R的长度<br><img src="https://img-blog.csdnimg.cn/20200418174244167.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzIxODUwMA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>如果<strong>i’</strong>半径压线，则需要继续向外扩<br><img src="https://img-blog.csdnimg.cn/20200418174722815.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzIxODUwMA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul></blockquote><h2 id="时间复杂度O-N"><a href="#时间复杂度O-N" class="headerlink" title="时间复杂度O(N)"></a>时间复杂度O(N)</h2><h2 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h2></li></ol><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 插入字符#</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">char</span>[] manacherString(String str) &#123;<br><span class="hljs-type">char</span>[] charArr = str.toCharArray();<br><span class="hljs-type">char</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[str.length() * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>];<span class="hljs-comment">//扩展的数组</span><br><span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i != res.length; i++) &#123;<br>res[i] = (i &amp; <span class="hljs-number">1</span>) == <span class="hljs-number">0</span> ? <span class="hljs-string">&#x27;#&#x27;</span> : charArr[index++];<span class="hljs-comment">//i &amp; 1与运算：表示i的二进制第一位的数与1的与运算，总体下来结果为：01010101···</span><br>&#125;<br><span class="hljs-keyword">return</span> res;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">maxLcpsLength</span><span class="hljs-params">(String str)</span> &#123;<br><span class="hljs-keyword">if</span> (str == <span class="hljs-literal">null</span> || str.length() == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">char</span>[] charArr = manacherString(str);<span class="hljs-comment">//获得处理好的字符串</span><br><span class="hljs-type">int</span>[] pArr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[charArr.length];<span class="hljs-comment">//存储回文半径</span><br><span class="hljs-type">int</span> <span class="hljs-variable">C</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">R</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> Integer.MIN_VALUE;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i != charArr.length; i++) &#123;<br>pArr[i] = R &gt; i ? Math.min(pArr[<span class="hljs-number">2</span> * C - i], R - i) : <span class="hljs-number">1</span>;<span class="hljs-comment">//划分为两个大的范围，i在内和i在外，并且不需要进行验证（即都是扩展之前的状态）</span><br><span class="hljs-comment">//虽然第二大类的1、2类可以直接出结果，不需要再扩，但是这里对四种情况都进行扩充，第二大类的1、2类会直接判断不能再扩</span><br><span class="hljs-keyword">while</span> (i + pArr[i] &lt; charArr.length &amp;&amp; i - pArr[i] &gt; -<span class="hljs-number">1</span>) &#123;<span class="hljs-comment">//判断i扩充是否越界</span><br><span class="hljs-keyword">if</span> (charArr[i + pArr[i]] == charArr[i - pArr[i]])<span class="hljs-comment">//扩充比较</span><br>pArr[i]++;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (i + pArr[i] &gt; R) &#123;<br>R = i + pArr[i];<br>C = i;<br>&#125;<br>max = Math.max(max, pArr[i]);<br>&#125;<br><span class="hljs-keyword">return</span> max - <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="面试题目"><a href="#面试题目" class="headerlink" title="面试题目"></a>面试题目</h2><p>要求：如果只能向字符串的最后添加字符，怎么样让字符串变为回文串，并且添加的字符数量最少。<br>例如：abc12321；则添加cba可以达成要求。<br>解法：在判断最右边界R时，当第一次R到达最右边界时（例如：中心为3时最右边界R为1，恰为字符串最右边界），则停止，并根据最右边界R中心C判断出左边界，并且将左边界前的字符串逆序添加到字符串后边。</p>]]></content>
    
    
    <categories>
      
      <category>技术博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>清楚！理解“UV、IP和PV＂的定义！</title>
    <link href="/2022/04/21/UV/"/>
    <url>/2022/04/21/UV/</url>
    
    <content type="html"><![CDATA[<h3 id="UV-Unique-visitor"><a href="#UV-Unique-visitor" class="headerlink" title="UV(Unique visitor)"></a>UV(Unique visitor)</h3><p>是指通过互联网访问、浏览这个网页的自然人。访问您网站的一台电脑客户端为一个访客。00:00-24:00内相同的客户端只被计算一次。<br>一天内同个访客多次访问仅计算一次。即（UV+1）</p><h3 id="IP（Internet-Protocol）"><a href="#IP（Internet-Protocol）" class="headerlink" title="IP（Internet Protocol）"></a>IP（Internet Protocol）</h3><p>独立IP是指访问过某站点的IP总数，以用户的IP地址作为统计依据。00:00-24:00内相同IP地址之被计算一次。</p><h3 id="UV与IP区别："><a href="#UV与IP区别：" class="headerlink" title="UV与IP区别："></a>UV与IP区别：</h3><p><strong>UV–以客户端作为计算标准</strong><br><strong>IP–以IP地址作为计算标准</strong><br>如：你和你的家人用各自的账号在同一台电脑上登录新浪微博，则IP数+1，UV数+2。由于使用的是同一台电脑，所以IP不变，但使用的不同账号，所以UV+2</p><h3 id="PV（Page-View）"><a href="#PV（Page-View）" class="headerlink" title="PV（Page View）"></a>PV（Page View）</h3><p>即页面浏览量或点击量，用户每1次对网站中的每个网页访问均被记录1个PV。用户对同一页面的多次访问，访问量累计，用以衡量网站用户访问的网页数量。</p><h3 id="UV与PV区别："><a href="#UV与PV区别：" class="headerlink" title="UV与PV区别："></a>UV与PV区别：</h3><p><strong>PV–以浏览次数为标准</strong><br>简单来说：<br>PV，就是你自己刷新这个页面，刷新10次，PV就+10<br>UV，就是你自己刷新这个页面，刷新10次，UV只+1</p>]]></content>
    
    
    <categories>
      
      <category>技术博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mysql8.0及以上 only_full_group_by报错解决方案</title>
    <link href="/2022/04/21/hello-world/"/>
    <url>/2022/04/21/hello-world/</url>
    
    <content type="html"><![CDATA[<h1 id="Mysql8-0及以上-only-full-group-by报错解决方案"><a href="#Mysql8-0及以上-only-full-group-by报错解决方案" class="headerlink" title="Mysql8.0及以上 only_full_group_by报错解决方案"></a>Mysql8.0及以上 only_full_group_by报错解决方案</h1><h2 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h2><p>在mysql8.0及以上的版本中，数据库sql_mode默认设置了only_full_group_by</p><h2 id="方法一（适合mysql长期不重启、电脑不关机用户）"><a href="#方法一（适合mysql长期不重启、电脑不关机用户）" class="headerlink" title="方法一（适合mysql长期不重启、电脑不关机用户）"></a>方法一（适合mysql长期不重启、电脑不关机用户）</h2><h3 id="终端"><a href="#终端" class="headerlink" title="终端"></a>终端</h3><figure class="highlight awk"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs awk">进入mysql<br>终端输入 ：    <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/MySQL/</span>bin/mysql -u root -p<br>然后输入密码进入mysql<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql">输入：<span class="hljs-keyword">SELECT</span> @<span class="hljs-variable">@sql</span>_mode;  <br>可以看到如下显示结果：<br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span> @<span class="hljs-variable">@sql</span>_mode;<br><span class="hljs-operator">+</span><span class="hljs-comment">-----------------------------------------------------------------------------------------------------------------------+</span><br><span class="hljs-operator">|</span> @<span class="hljs-variable">@sql</span>_mode                                                                                                            <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----------------------------------------------------------------------------------------------------------------------+</span><br><span class="hljs-operator">|</span> ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----------------------------------------------------------------------------------------------------------------------+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">通过以下脚本关闭 ：<br><span class="hljs-keyword">SET</span> <span class="hljs-keyword">SESSION</span> sql_mode=(<span class="hljs-keyword">SELECT</span> REPLACE(@@sql_mode,<span class="hljs-string">&#x27;ONLY_FULL_GROUP_BY,&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>));<br></code></pre></td></tr></table></figure><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><br>再次查询 @@sql_mode 返回中应该已经没有该模式了。<br><br><span class="hljs-section">mysql&gt; SELECT @@sql_mode;</span><br><span class="hljs-section">+----------------------------------------------------------------------------------------------------+</span><br><span class="hljs-section">| @@sql_mode                                                                                         |</span><br><span class="hljs-section">+----------------------------------------------------------------------------------------------------+</span><br><span class="hljs-section">| STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION |</span><br><span class="hljs-section">+----------------------------------------------------------------------------------------------------+</span><br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="navicat"><a href="#navicat" class="headerlink" title="navicat"></a>navicat</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">选择对应数据库，同上执行下面两句，可以查看和配置sql_mode<br><span class="hljs-keyword">SELECT</span> @<span class="hljs-variable">@sql</span>_mode;  <br><span class="hljs-keyword">SET</span> SESSION sql_mode<span class="hljs-operator">=</span>(<span class="hljs-keyword">SELECT</span> REPLACE(@<span class="hljs-variable">@sql</span>_mode,<span class="hljs-string">&#x27;ONLY_FULL_GROUP_BY,&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>));<br></code></pre></td></tr></table></figure><h3 id="弊端"><a href="#弊端" class="headerlink" title="弊端"></a>弊端</h3><p>mysql重启后失效，需要重新配置。</p><h2 id="方法二：通过修改my-cnf配置文件"><a href="#方法二：通过修改my-cnf配置文件" class="headerlink" title="方法二：通过修改my.cnf配置文件"></a>方法二：通过修改my.cnf配置文件</h2><p>首先MAC下默认没有my.cnf配置文件，需要自己创建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">首先进入etc 文件夹<br><span class="hljs-built_in">cd</span> /etc<br></code></pre></td></tr></table></figure><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vhdl">然后通过 sudo vi my.cnf（一般需要管理权限执行，不然会报：<span class="hljs-string">&quot;my.cnf&quot;</span> E212: Can<span class="hljs-symbol">&#x27;t</span> <span class="hljs-keyword">open</span> <span class="hljs-keyword">file</span> <span class="hljs-keyword">for</span> writing）<br>创建并编写文件，然后按 i，进行编写<br>并将下述内容复制到文件中<br></code></pre></td></tr></table></figure><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-comment"># Example MySQL config file for small systems.  </span><br><span class="hljs-comment">#  </span><br><span class="hljs-comment"># This is for a system with little memory (&lt;= 64M) where MySQL is only used  </span><br><span class="hljs-comment"># from time to time and it&#x27;s important that the mysqld daemon  </span><br><span class="hljs-comment"># doesn&#x27;t use much resources.  </span><br><span class="hljs-comment">#  </span><br><span class="hljs-comment"># MySQL programs look for option files in a set of  </span><br><span class="hljs-comment"># locations which depend on the deployment platform.  </span><br><span class="hljs-comment"># You can copy this option file to one of those  </span><br><span class="hljs-comment"># locations. For information about these locations, see:  </span><br><span class="hljs-comment"># http://dev.mysql.com/doc/mysql/en/option-files.html  </span><br><span class="hljs-comment">#  </span><br><span class="hljs-comment"># In this file, you can use all long options that a program supports.  </span><br><span class="hljs-comment"># If you want to know which options a program supports, run the program  </span><br><span class="hljs-comment"># with the &quot;--help&quot; option.  </span><br><br><span class="hljs-comment"># The following options will be passed to all MySQL clients  </span><br>[client]  <br>default-character-set=utf8  <br><span class="hljs-comment">#password   = your_password  </span><br>port        = 3306 <br>socket      = /tmp/mysql.sock  <br><br><span class="hljs-comment"># Here follows entries for some specific programs  </span><br><br><span class="hljs-comment"># The MySQL server   </span><br>[mysqld]  <br>default-storage-engine=INNODB  <br>character-set-server=utf8  <br>collation-server=utf8_general_ci  <br>port        = 3306 <br>socket      = /tmp/mysql.sock  <br>skip-external-locking  <br>key_buffer_size = 16K  <br>max_allowed_packet = 1M  <br>table_open_cache = 4 <br>sort_buffer_size = 64K  <br>read_buffer_size = 256K  <br>read_rnd_buffer_size = 256K  <br>net_buffer_length = 2K  <br>thread_stack = 128K  <br><br><span class="hljs-comment"># Don&#x27;t listen on a TCP/IP port at all. This can be a security enhancement,  </span><br><span class="hljs-comment"># if all processes that need to connect to mysqld run on the same host.  </span><br><span class="hljs-comment"># All interaction with mysqld must be made via Unix sockets or named pipes.  </span><br><span class="hljs-comment"># Note that using this option without enabling named pipes on Windows  </span><br><span class="hljs-comment"># (using the &quot;enable-named-pipe&quot; option) will render mysqld useless!  </span><br><span class="hljs-comment">#   </span><br><span class="hljs-comment">#skip-networking  </span><br>server-id   = 1 <br><br><span class="hljs-comment"># Uncomment the following if you want to log updates  </span><br><span class="hljs-comment">#log-bin=mysql-bin  </span><br><br><span class="hljs-comment"># binary logging format - mixed recommended  </span><br><span class="hljs-comment">#binlog_format=mixed  </span><br><br><span class="hljs-comment"># Causes updates to non-transactional engines using statement format to be  </span><br><span class="hljs-comment"># written directly to binary log. Before using this option make sure that  </span><br><span class="hljs-comment"># there are no dependencies between transactional and non-transactional  </span><br><span class="hljs-comment"># tables such as in the statement INSERT INTO t_myisam SELECT * FROM  </span><br><span class="hljs-comment"># t_innodb; otherwise, slaves may diverge from the master.  </span><br><span class="hljs-comment">#binlog_direct_non_transactional_updates=TRUE  </span><br><br><span class="hljs-comment"># Uncomment the following if you are using InnoDB tables  </span><br><span class="hljs-comment">#innodb_data_home_dir = /usr/local/mysql/data  </span><br><span class="hljs-comment">#innodb_data_file_path = ibdata1:10M:autoextend  </span><br><span class="hljs-comment">#innodb_log_group_home_dir = /usr/local/mysql/data  </span><br><span class="hljs-comment"># You can set .._buffer_pool_size up to 50 - 80 %  </span><br><span class="hljs-comment"># of RAM but beware of setting memory usage too high  </span><br><span class="hljs-comment">#innodb_buffer_pool_size = 16M  </span><br><span class="hljs-comment">#innodb_additional_mem_pool_size = 2M  </span><br><span class="hljs-comment"># Set .._log_file_size to 25 % of buffer pool size  </span><br><span class="hljs-comment">#innodb_log_file_size = 5M  </span><br><span class="hljs-comment">#innodb_log_buffer_size = 8M  </span><br><span class="hljs-comment">#innodb_flush_log_at_trx_commit = 1 </span><br><span class="hljs-comment">#innodb_lock_wait_timeout = 50 </span><br><br>[mysqldump]  <br>quick  <br>max_allowed_packet = 16M  <br><br>[mysql]  <br>no-auto-rehash  <br><span class="hljs-comment"># Remove the next comment character if you are not familiar with SQL  </span><br><span class="hljs-comment">#safe-updates  </span><br><br>[myisamchk]  <br>key_buffer_size = 8M  <br>sort_buffer_size = 8M  <br><br>[mysqlhotcopy]  <br>interactive-timeout <br><br>[mysqld]<br>sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION<br></code></pre></td></tr></table></figure><p>使用:wq!命令保存退出文件<br>修改下my.cnf的文件权限</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo chmod <span class="hljs-number">664</span> <span class="hljs-regexp">/etc/my</span>.cnf <br></code></pre></td></tr></table></figure><p>最后重启Mysql,配置文件就可以生效了</p><h2 id="方法三：通过改代码实现"><a href="#方法三：通过改代码实现" class="headerlink" title="方法三：通过改代码实现"></a>方法三：通过改代码实现</h2><p>可以通过 ANY_VALUE() 来改造查询语句以避免报错。</p><p>使用 ANY_VALUE() 包裹的值不会被检查，跳过该错误。所以这样是可以的：<br>如下所示</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> gender, <br>-       last_name（改前）<br>+       ANY_VALUE(last_name) （改后）<br><span class="hljs-keyword">FROM</span>   employees <br><span class="hljs-keyword">GROUP</span>  <span class="hljs-keyword">BY</span> gender <br></code></pre></td></tr></table></figure><p>参考：<br><a href="https://www.cnblogs.com/Wayou/p/mysql_group_by_issue.html">https://www.cnblogs.com/Wayou/p/mysql_group_by_issue.html</a><br><a href="https://blog.csdn.net/weixin_38106322/article/details/105345643">https://blog.csdn.net/weixin_38106322/article/details/105345643</a></p>]]></content>
    
    
    <categories>
      
      <category>技术博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
